package de.tuhh.diss.harborstorage;

import de.tuhh.diss.harborstorage.sim.HighBayStorage;
import de.tuhh.diss.harborstorage.sim.StorageException;
import de.tuhh.diss.harborstorage.sim.PhysicalCrane;
import de.tuhh.diss.harborstorage.sim.PhysicalHarborStorage;
import de.tuhh.diss.harborstorage.sim.StoragePlace;



public class HarborStorageManagement implements HighBayStorage {
	private CraneControl CC;
	private Packet packet;
	private Slot[] slot;// : do we have to create slot sizes/where do we put this?>no
	private PhysicalCrane cr;
	private PhysicalHarborStorage phs;
	private StoragePlace[] SP;
	private int numPacketStored;
	public HarborStorageManagement (){
	
	cr=phs.getCrane();	
	SP=phs.getStoragePlacesAsArray();
	CC = new CraneControl(cr); // crane controler within the HSM constructor
	numPacketStored =0;
	slot = makeSlotArray(slot); 
	}
	
	//final static public int NUM_SLOTS = 29;
	
	public int storePacket(int width, int height, int depth, String description, int weight) throws StorageException {
		packet= new Packet( width,  height,  depth,  description,  weight);
		int sslot = findSutiable(packet);
		int x=slot[sslot].getPositionX();
		int y=slot[sslot].getPositionY();
		CC.storePacket(x, y, packet);
		numPacketStored++;
				return 0; // : Replace this with your own code. return 0 is there for the throws?
	}
	
	public void retrievePacket(String description) throws StorageException {
		Packet[] packetArray;
		
		packetArray=getPackets();
		int count=0;
		String des = packetArray[count].getDescription();
		if (des!=description){
		while (packetArray[count]!=null || des!=description){
			count++;
			des = packetArray[count].getDescription();}
		}
		int id=packetArray[count].getId();
		
		int ID=0;
		count=0;
		if (id!=ID){
			while (slot[count]!=null || id!=ID){
				
				count++;
				id = slot[count].getNumber();}
			}
		int x = slot[count].getPositionX();
		int y = slot[count].getPositionY();
		
		CC.retrievePacket(x,y);
		numPacketStored--;
		// : Add your own code. 
	}
	
	public Packet[] getPackets() {
		Packet[] packetArray;
		int count = 0;
		packetArray= new Packet [numPacketStored];
		for(int i=0; i<=SP.length; i++){
			if (slot[i].getContainPacket()!=null){
				packetArray[count] = slot[i].getContainPacket(); //added (packet) cast, no idea what this does...
				count++;
			}
		}
		
		return packetArray; // : Replace this with your own code. 
	}
	
	public void shutdown() {
		CC.shutdown();
		// : Add your own code. 
	}
	private int findSutiable(Packet p){
	int tempslot = 0;
	double tsqdiff = 0;
	//int tvoldiff;
	//int tweidiff;
	//voldiff=new int [29];
	//int weightdiff[];
	//weightdiff= new int [29]; //TODO do we just want to create a final constant for the size so it can be changed?
		for(int i=0; i<=SP.length; i++){
			if (slot[i].getContainPacket()==null && p.getWidth() <= slot[i].getWidth() && p.getHeight() <= slot[i].getHeight() && 
					p.getDepth() <= slot[i].getDepth() && p.getWeight()<=slot[i].getLoadCapacity()){
				int volsp=slot[i].getWidth()*slot[i].getHeight()*slot[i].getDepth();
				int volp=p.getWidth()*p.getHeight()*p.getDepth();
				int voldiff = volsp-volp;
				int weightdiff=slot[i].getLoadCapacity()-p.getWeight();
				double sqdiff = Math.sqrt(weightdiff*weightdiff + voldiff*voldiff);
			
				if(voldiff==0 && weightdiff==0){
					tempslot = i;
					break;
					} else if(tempslot == 0){
						tempslot = i;
						tsqdiff = sqdiff;
					} else if(tempslot>0 && sqdiff<tsqdiff){
						tempslot = i;
						tsqdiff = sqdiff;
					}
				}
			}
		
		/*int volmin= voldiff[0];
		int weightmin= weightdiff[0];
		for(int i=0; i<30; i++){
			if (voldiff[i] <= volmin ||weightdiff[i]<weightmin){
				slot[]=new Slot (SP[i].getNumber(), SP[i].getWidth(),SP[i].getHeight(), SP[i].getDepth(),
						SP[i].getPositionX(), SP[i].getPositionY(), SP[i].getLoadCapacity()  ) ;
				break;
			}
		}*/
		return tempslot; // : Replace this with your own code.
	}
	
	private Slot[] makeSlotArray(Slot[] s){
		s = new Slot[SP.length];
		for (int i = 0; i<=SP.length;i++){
			s[i]=new Slot(SP[i].getNumber(), SP[i].getWidth(), SP[i].getHeight(), SP[i].getDepth(), 
					SP[i].getPositionX(),SP[i].getPositionY(), SP[i].getLoadCapacity()); //use this to call the slots out in the find sutiable initialize get packet with null
			s[i].setContainPacket(null);
	
		}
	
		return s;
	}
}
